name: 'networkTrainTest-image'

# LeNet on top of a simple 2-hidden-layer, fully-connected network. Takes an image and a problem-specific state feature vector.

# === INPUTS ====

layer {
   type: "HDF5Data"
   top: "state-image"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TRAIN }
}
layer {
   type: "HDF5Data"
   top: "action-image"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TRAIN }
}
layer {
   type: "HDF5Data"
   top: "state-vector"
   top: "label"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TRAIN }
}
layer {
   type: "HDF5Data"
   top: "action-vector"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TRAIN }
}

layer {
   type: "HDF5Data"
   top: "state-image"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TEST }
}
layer {
   type: "HDF5Data"
   top: "action-image"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TEST }
}
layer {
   type: "HDF5Data"
   top: "state-vector"
   top: "label"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TEST }
}
layer {
   type: "HDF5Data"
   top: "action-vector"
   hdf5_data_param {
     source: "/home/mgualti/mgualti/PickAndPlace/simulation/caffe/fileNameList-train.txt"
     batch_size: 32
   }
   include { phase:TEST }
}

# === LENET-STATE ====

layer {
  type: "Convolution"
  name: "lenet-conv1-s"
  top: "lenet-conv1-s"
  bottom: "state-image"
  convolution_param {
    num_output: 20
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  type: "Pooling"
  name: "lenet-pool1-s"
  top: "lenet-pool1-s"
  bottom: "lenet-conv1-s"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  type: "Convolution"
  name: "lenet-conv2-s"
  top: "lenet-conv2-s"
  bottom: "lenet-pool1-s"
  convolution_param {
    num_output: 50
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  type: "Pooling"
  name: "lenet-pool2-s"
  top: "lenet-pool2-s"
  bottom: "lenet-conv2-s"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  type: "InnerProduct"
  name: "lenet-ip1-s"
  top: "lenet-ip1-s"
  bottom: "lenet-pool2-s"
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  type: "ReLU"
  name: "lenet-relu1-s"
  bottom: "lenet-ip1-s"
  top: "lenet-ip1-s"
}
layer {
  type: "InnerProduct"
  name: "lenet-ip2-s"
  top: "lenet-ip2-s"
  bottom: "lenet-ip1-s"
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
  }
}

# === LENET-ACTION ====

layer {
  type: "Convolution"
  name: "lenet-conv1-a"
  top: "lenet-conv1-a"
  bottom: "action-image"
  convolution_param {
    num_output: 20
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  type: "Pooling"
  name: "lenet-pool1-a"
  top: "lenet-pool1-a"
  bottom: "lenet-conv1-a"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  type: "Convolution"
  name: "lenet-conv2-a"
  top: "lenet-conv2-a"
  bottom: "lenet-pool1-a"
  convolution_param {
    num_output: 50
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  type: "Pooling"
  name: "lenet-pool2-a"
  top: "lenet-pool2-a"
  bottom: "lenet-conv2-a"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  type: "InnerProduct"
  name: "lenet-ip1-a"
  top: "lenet-ip1-a"
  bottom: "lenet-pool2-a"
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  type: "ReLU"
  name: "lenet-relu1-a"
  bottom: "lenet-ip1-a"
  top: "lenet-ip1-a"
}
layer {
  type: "InnerProduct"
  name: "lenet-ip2-a"
  top: "lenet-ip2-a"
  bottom: "lenet-ip1-a"
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
  }
}

# === CONNECTION ===

layer {
  type: "Concat"
  name: "concat"
  top: "concat"
  bottom: "lenet-ip2-s"
  bottom: "lenet-ip2-a"
  bottom: "state-vector"
  bottom: "action-vector"
}

# === MARCNET ====

layer {
  type: "InnerProduct"
  name: "ip1"
  top: "ip1"
  bottom: "concat"
  inner_product_param {
    num_output: 60
    weight_filler { type: 'xavier' }
  }
}
layer {
  type: "ReLU"
  name: "relu1"
  top: "ip1"
  bottom: "ip1"
}
layer {
  type: 'InnerProduct'
  name: 'ip2'
  top: 'ip2'
  bottom: 'ip1'
  inner_product_param {
    num_output: 60
    weight_filler { type: 'xavier' }
  }
}
layer {
  type: "ReLU"
  name: "relu2"
  top: "ip2"
  bottom: "ip2"
}
layer {
  type: 'InnerProduct'
  name: 'ip3'
  top: 'ip3'
  bottom: 'ip2'
  inner_product_param {
    num_output: 1
    weight_filler { type: 'xavier' }
  }
}

# === OUTPUT ===

layer {
  type: "EuclideanLoss"
  name: "loss"
  top: "loss"
  bottom: "ip3"
  bottom: "label"  
}
